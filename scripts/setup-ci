#!/bin/bash

# Portions of this script was copied from https://github.com/Homebrew/actions/blob/master/setup-commit-signing/main.sh
# which licensed under the BSD-2-Clause License. Please see tge full license text
# at https://github.com/Homebrew/actions/blob/master/LICENSE for full legal text. While MIT license and BSD-2-Clause is
# compartible with each other, just like BSD 3-Clause, they haveminute differences to the MIT license.

set -eo pipefail

# then setup our ci
git config --global user.email "releases@madebythepins.tk"
git config --global user.name "Software Releases | The Pins Team"

errorLog() {
  if [[ $GH_ACTIONS_MODE == "" ]]; then
    echo "error: $1"
  else
    echo "::error::$1"
  fi
}

if [[ $HOMEBREW_ACTIONS_USED != "true" ]]; then
  # then get the Software Releases key
  GPG_SIGNING_KEY="${RELEASES_GPG_KEY}"

  if [[ $GPG_SIGNING_KEY == "" ]]; then
     errorLog "RELEASES_GPG_KEY is missing. Make sure you set it before running this script"
     exit 1
  elif [[ $RELEASES_GPG_PASSPHARSE == "" ]]; then
     errorLog "GPG passpharse is missing, aborting CI setup..."
     exit 1 
  fi

  # ensure GNU Privacy Guard home dir is ready.
  export GNUPGHOME="$HOME/.gnupg/"
  mkdir -p "$GNUPGHOME"
  chmod 0700 "$GNUPGHOME"

  GPG_EXEC=$(command -v gpg)

  # Wrapper script to use passphrase non-interactively with git
  GPG_WITH_PASSPHRASE=$(mktemp)
  echo "$GPG_EXEC"' --pinentry-mode loopback --passphrase "$RELEASES_GPG_PASSPHARSE" --batch --no-tty "$@"' > $GPG_WITH_PASSPHRASE
  chmod +x $GPG_WITH_PASSPHRASE
  git config --global gpg.program $GPG_WITH_PASSPHRASE

  echo "$GPG_SIGNING_KEY" | base64 --decode | gpg --batch --no-tty --quiet --yes --import
  GPG_KEY_ID=$(gpg --list-keys --with-colons | sed -ne "/^sub:/ p;" | cut -d: -f5)

  git config --global user.signingkey $GPG_KEY_ID
  git config --global commit.gpgsign true
elif [[ $HOMEBREW_ACTION_USED == "true" ]]; then
  echo "HOMEBREW_ACTIONS_USED variable is set to true, skipping the wrapper script creation..."
fi
